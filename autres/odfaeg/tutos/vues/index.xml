<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/xsl/structure.xsl"?>
<page>
    <menu>/autres/odfaeg/xml/menu.xml</menu>
    <footer>/autres/odfaeg/xml/footer.xml</footer>
    <title>ODFAEG</title>
    <content>
        <fr>
                <html>
                        <h1>Chapitre V : les vues.</h1>

               <h2>Positionnement, orientation par défaut et origine des vues.</h2>

<p>
Les vues de odfaeg sont différentes des vues SFML, car elles n'ont pas la même origine, c'est à dire que la coordonnée <br/>
0,0 est le centre de l'écran et non pas le coin supérieur gauche, mais on peut changer cela en la déplaçant comme ceci : <br/>
view.move(-width*0.5f, height*0.5f, 0);<br/>
width et height sont la largeur et la hauteur de la vue.

Comme pour SFML, l'axe y de la vue pointe vers le bas (car c'est plus simple de travailler comme cela en 2D) et l'axe x pointe vers la droite.<br/>
L'axe z quand à lui pointe vers le haut, et contrairement à SFML, zNear et zFar ne sont pas situés entre -1 et 1 mais entre 0 et <br/>
la hauteur de la vue, ce qui permet de "clippé" toutes les entités qui ne se trouvent pas entre 0 et la hauteur de la vue.<br/>
En réalité la vue 2D de ODFAEG n'est rien d'autre qu'une vue en 3D mais en vue du dessus, c'est à dire avec le haut de la vue pointe<br/>
vers l'axe des y positifs, et le z sert à déterminer la hauteur.<br/>
Pour la vue en 3D, cela est différent, car le haut de la vue pointe vers l'axe des z positif, l'axe y pointe donc vers l'avant!<br/>
La vue par défaut est en 2D et les coodonnées sont situées entre -width*0.5, width*0.5 pour x, -height*0.5, height*0.5 pour y<br/>
et 0, height pour z.<br/>
Pour passer en vue 3D il suffit de changer de vue comme ceci : <br/>
View view(size.x, size.y, 80, 0.1f, 1000); <br/>
getRenderWindow().setView(view); <br/>
size est la dimention de la fenêtre, 80 le fovy, 0.1f le plan near et 1000 le plan far.<br/>
En vue 3D, les coordonnées sont situées entre -1 et 1 en x et en z (avec ODFAEG) pour un objet situé sur le plan<br/>
near de la caméra, car en 3D les objets sont plus gros<br/>
lorsqu'ils sont plus proche de l'observateur.<br/>
Si vous ne savez pas ce que sont les plans near et far ainsi que le fovy, je vous invite à lire les tutoriels<br/>
de Kayl sur <a href="http://openclassrooms.com/courses/creez-des-programmes-en-3d-avec-opengl/enfin-de-la-3d-partie-1-2">ce site.</a>
<br/>
</p>

<p>Les composants tout comme la fenêtre de rendu possèdent également une vue, par défaut, c'est la même vue que celle de la <br/> 
fenêtre de rendu de l'application. <br/>
</p>

<h2>Jouer avec la vue.</h2>
<p>>
Pour déplacer la vue il suffit d'appeler la méthode move : <br/>

getView().move(0, 300, 300);<br/>

En 2D, ceci déplace la vue de 300 unités vers le bas, il faut aussi déplacer la vue en z sinon, les entités <br/>
dans le monde qui ont un y supérieur à celui de la vue ne seront jamais visible, même chose pour les entités <br/>
qui ont un y négatif. (ODFAEG se sert aussi de l'axe z pour déterminé si une entité est derrière ou bien devant une autre entité.)<br/>
Généralement la hauteur des entités est le centre de l'entité sur l'axe des y.
En 3D, le 1er paramètre déplace la vue latéralement, le second en profondeur, et le troisième en hauteur.<br/>
</p>
<p>
Pour effectuer une rotation de la vue en 2D, il suffit d'appeler la méthode rotate : <br/>
getView().rotate(0, 20, 0); <br/>
Ceci va effectuer une rotation de 20 degrés autout de l'axe y, c'est à dire l'axe vers lequel pointe le haut de la vue. <br/>
En 3D, le 1er paramètre sert à effectuer une rotation autour de l'axe x et le troisième autour de l'axe z. <br/>
En 3D, on peut aussi effectuer une rotation en coordonnées polaire comme expliqué dans ce tutoriel : <br/>
<a href="http://openclassrooms.com/courses/creez-des-programmes-en-3d-avec-opengl/controle-avance-de-la-camera-partie-2-2">Ici</a><br/>
getView().rotate(teta, phi); <br/>
Pour éviter de faire des looping il faut imposé une contrainte à la vue, la méthode setConstrains permet de faire cela : <br/>
view.setConstrains(0, 89); <br/>
Phi ne peut pas valoir plus que -89 ou que 89 dégré. <br/>
Pour zoomer, il suffit d'utiliser la méthode setScale : <br/>
view.setScale(scaleX, scaleY, scaleZ); <br/>
Et pour changer le viewport c'est à dire la zone sur la fenêtre ou sur le composant de rendu occupé par la vue, il suffit<br/>
d'appeler la méthode setViewport comme pour SFML.<br/>
Voila c'est tout en ce qui concerne les vues.<br/>
</p>
</html>
        </fr>
        <en>
            <html>
                <h1>Chaper V : views</h1>
                <h2>Positionning, orientation and defautl origin of odfaeg's views.</h2>
                    <p>
                    odfaeg's views are different from the SFML ones, they have not the same origin.<br/>
                    It means that the 0, 0 coordinates is the center of the screen, and not the top left corner.
                    So the coordinate of the top left corner is located at -width*0.5f and -height * 0.5f.<br/>
                    But,we can change that by moving the view like this : <br/>
                    view.move(-width*0.5f, height*0.5f, 0); <br/>
                    Where width and height are de dimention of the view. <br/>
                    Like SFML, the y axis of the view point to the bottom, it's easier to work like that,
                    and the x axis point to the right.<br/>
                    The z axis point to the top, but, unlike SFML, the position of the zNear and the zFar planes are <br/>
                    between 0 and the height of the view, and not between -1 and 1, this is because ODFAEG use the <br/>
                    z coordinate to know if an entity is before or behind another one.<br/>
                    So, in 2D, you can use the z coordinate to define the y center of the entity, this is very<br/>
                    usefull and simplier to work like this.<br/>
                    But don't forget that all entities which are not between 0 and the height of the view are clipped.<br/>
                    The 2D view is nothing more, nothing less than a 3D view but viewed from above.<br/>
                    So the top of the view point to positive y values.<br/>
                    For the 3D view it's a bit different, because, the top of the view point to the positive z values.<br/>
                    To pass from a 2D view to a 3D view you can change the view like this : <br/>
                    View view(size.x, size.y, 80, 0.1f, 1000); <br/>
                    getRenderWindow().setView(view); <br/>
                    Size is the dimention of the view, 80 is the fovy, 0.1f is the near plane position <br/>
                    and 1000 is the far plane position.<br/>
                    In 3D view, the coordinate of the top left corner is located at -1, 1 if the z is on the near plane.<br/>
                    This is because of the perspective projection : more the objects are near the view, more they seem to be bigger.<br/>
                    So if the z is on the zfar, the coordinate of the top lef corner is located at -width*0.5f, height*0.5f.<br/>
                    If you really don't know what a z plane, a near plane and a projection are, I recommand you to read this article. <br/>
                    The projection matrix of odfaeg are exactly the same.<br/>
                    <a href="http://www.songho.ca/opengl/gl_projectionmatrix.html">Here.</a>
                    ODFAEG have also render components and rendertargets, both can have a view.<br/>
                    </p>
                    <h2>Playing with the views : </h2>
                    <p>
                    You can move the view by calling the move method, for 2D view don't forget to also move the z of the view.<br/>
                    getView().move(0, 300, 300);<br/>
                    If you don't move the z, the entities'll be clipped by the near and the far plane.<br/>
                    In 2D this'll move the view with 300 unities bottom.<br/>
                    For the 3D, the first parameter move the view from vertically, the second deeply, and<br/>
                    the last horizontally.<br/>
                    To apply a rotation, we can use the rotate method, there are two versions : <br/>
                    The first version rotate the camera between the x, y and z axis.<br/>
                    getView().rotate(0, 20, 0); 
                    So in 2D it'll rotate the view of 20° : <br/>
                    The second version perform a rotation with polar coordinates. (very usefull in a 3D world)<br/>
                    getView().rotate(teta, phi); 
                    Sometimes it's needed to lock the camera, this is the case of FPS cameras, you can add <br/>
                    a constrainst to lock the camera in height for example like this.<br/>
                    view.setConstrains(0, 89); <br/>
                    You can also make the camera looked at a position in the world :
                    view.lookAt(target.x, target.y, target.z);
                    You can also of course, zoom, by calling the setScale function : <br/>
                    view.setScale(scaleX, scaleY, scaleZ); 
                    And you can also change the viewport of the view, the viewport is the area where the world'll be displayed<br/>
                    Into the window : <br/>
                    view.getViewport(left, top, width, height);<br/>
                    You can convert screen coordinate to world woordinate and world coordinate to screen coordinate<br/>
                    by calling the same method than SFML. (mapPixelToCoords and mapCoordsToPixel)<br/>
                    And that's it! This is how the powerfull views of ODFAEG works, and they offer a lot of possibilities!<br/>
                    </p>
            </html>
        </en>
    </content>
</page>
