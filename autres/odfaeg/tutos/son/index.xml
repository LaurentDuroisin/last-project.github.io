<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/xsl/structure.xsl"?>
<page>
<menu>/autres/odfaeg/xml/menu.xml</menu>
<footer>/autres/odfaeg/xml/footer.xml</footer>
<title>ODFAEG</title>
<content>
<fr>
<html>
  <h1>Chapitre XIV : Le son. </h1>
      Voici le dernier gros chapitre avant d'entamer les tutoriels illustratifs.<br/>
      qui seront des example de petits jeux opensource codé avec le moteur.<br/>
      <h2>Chargé un son avec ODFAEG.</h2>
          <p>
          Pour rappel, pour charger un son il y a deux manière de le faire, avec SFML il y a deux classes qui permettent de le faire : <br/>
          sf::SoundBuffer pour charger des effets sonores.<br/>
          sf::Music pour charger des musiques. (Toute la musique n'est pas chargée en une fois, mais, au fur et à mesure qu'elle est jouée)<br/>
          ODFAEG utilise deux classes mais différente des classes SFML pour jouer un son.<br/>
          La classe odfaeg::audio::Stream : Celle ci permet manipuler des flux audio.<br/>
          La classe player : cette classe permet de jouer un effet sonore ou bien une musique, ça dépend de ce que l'utilisateur <br/>
          lui passe comme flux sonore, ODFAEG utilise sont propre type de flux. (la classe odfaeg::audio::Stream)
          Il suffit de lui passer une instance de cette classe pour charger le son dans le player.<br/>
          Voici un example qui charge un effet sonore et le passe au player.<br/>
          <pre>
          SoundBufferManager&lt;&gt; sm;
          sm.fromFileWithAlias("sounds/walk_crop.wav", "step foot");
          Stream* stream = new Stream();
          stream->load(*sm.getResourceByAlias("step foot"));
          player.setAudioStream(stream);
          cache.addResourceManager(sm, "SoundManager");
          </pre>
          Pour charger une musique, vous devez utiliser la méthode openFromFile de la classe Stream.
          </p>
          
          <h2>Jouer un son.</h2>
            <p>
            La classe player contient plusieurs méthodes pour pouvoir jouer un son, le mettre en pause, ou encore, le stopper.<br/>
            Les méthodes actuelles sont : <br/>
            La méthode play pour joueur un son.<br/>
            La méthode pause pour mettre un son en pause.<br/>
            La méthode stop pour stopper un son.<br/>
            La méthode isPlaying pour savoir si un son est actuellement joué ou bien stoppé.<br/>
            La méthode setPitch pour modifier la vitesse avec laquelle le son est joué.<br/>
            La méthode setVolume pour modifier le volume du son.<br/>
            La méthode stero pour savoir si le son est mono ou bien stéréo.<br/>
            Et pleins d'autres méthode utilisée pour la spatialisation du son.<br/>
            </p>
            <p>
            Voici un example de code source qui montre comment lancé et arrêté un son.<br/>
            <pre>
                if (!player.isPlaying()) 
                  player.play(true);
            </pre>
            La méthode play prend un booléen, qui indique si le son doit être joué en boucle ou bien pas.<br/>
            Par défaut, ce booléen vaut false.<br/>
            <pre>
            if (player.isPlaying())
               player.stop();
            </pre>
            </p>
            <h2>La spacialisation du son.</h2>
            <p>
                Comme le module audio de ODFAEG utilise SFML, il est également possible d'utiliser la spacialisation<br/>
                du son en se servant des méthodes et des classes SFML prévue à cet effet, je ne détaillerai donc pas ce point là ici<br/>
            </p>
    </html>
    </fr>
    <en>
      <html>
        <h1>Chapter XIV : the sound.</h1>
        This is the last chapter before the opensource game examples tutorials!<br/>
        Until now ODFAEG just provides some executables to show you how the engine works in a global way.<br/>
        But it doesn't show you how to create a game from A to Z.<br/>
        Of course, I won't create the last revolutionnary mmorpg, this is just not possible for a single and poor developper like me.<br/>
        And even if you do so, it'll takes a lot of years!<br/>
        So I'll just show you how to create simple games, and it'll be up to you to innovate.<br/>
        <h2>Loading a sound.</h2>
        If you remember well, there are two ways to load a sound, with SFML, the first is with the sf::Music<br/>
        class and the second is the sf::SoundBuffer class.<br/>
        ODFAEG also provides two ways to load sounds, but ODFAEG use a custom stream to pass the sounds to the player. (ths odfaeg::audio::Stream class)<br/>
        So you need to load the sound with the SFML classe, and pass it to the player like this : <br/>
        <pre>
           SoundBufferManager<> sm;
           sm.fromFileWithAlias("sounds/walk_crop.wav", "step foot");
           Stream* stream = new Stream();
           stream->load(*sm.getResourceByAlias("step foot"));
           player.setAudioStream(stream);
           cache.addResourceManager(sm, "SoundManager");
        </pre>
        To play a music, just use the openFromFile method of the stream class.<br/>
        Remember that musics are not loaded directly, but while they are playing.<br/>
        The class player have a bunch of methods, which are very similar to the methods<br/>
        of the sf::SoundBuffer class and of the sf::Music class.<br/>
        The only different is that ODFAEG use a single class to play sounds.<br/>
        Because I find that this way of doing is much simplier.<br/>
        The method play allow you to play a sound.<br/>
        The method pause allow you to set the sound in pause.<br/>
        The method isPlaying allow you to know if a sound is currently played.<br/>
        The method setPitch change the speed which the sound is played.<br/>
        The method setVolume change the volume of the sound.<br/>
        The method stereo allows you to know if the sound is stereo.<br/>
        This can be usefull for sound's saptialization, where the sound haven't to be stereo.<br/>
        And there are also every method for sound spatialization.<br/>
        <pre>
           if (!player.isPlaying()) 
               player.play(true);
        </pre>
        The play method take a parameter, a boolean, which indicates if the sound must be playing in loop<br/>
        or not.<br/>
        <h2>The spacialization of the sound.</h2>
        The audio module of ODFAEG use the SFML module of ODFAEG, so, <br/>
        you can also use the sf::Listener class to set up the spatialisation of the sound.<br/>
        And to set up the sound source, you can use the methods of the player class which are <br/>
        the same than the method of the sf::Music and sf::SoundBuffer class.<br/>
      </html>
    </en>
  </content>
  </page>
