<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/xsl/structure.xsl"?>
<page>
    <menu>/autres/odfaeg/xml/menu.xml</menu>
    <footer>/autres/odfaeg/xml/footer.xml</footer>
    <title>ODFAEG</title>
    <content>
        <fr>
                <html>
                        <h1>Chapitre XII : Le système de sauvegarde de odfaeg.</h1>

               		La sauvegarde d'entités simple : 


Pour sérialiser des données il faut deux choses. (une archive qui contiendra le flux dans lequel on mettra les données, ainsi que le flux bien sur)
Pour le moment odfaeg gère 2 types d'archives : une pour l'écriture (OTextArchive) et une pour la lecture. (ITextArchive)
Mais plus tard il est fort possible que j'incorpore d'autres types d'archive comme par exemple les archives binaires ou bien les archives au format xml.

Il faut donc créer un objet de ce type en lui passant un flux, par exemple, un fichier :

ofstream ofs("thefile");
OTextArchive oa (ofs);
Ensuite pour sérialiser il suffit d'appeler l'opérateur () sur l'archive en lui passant l'objet, ici par exemple nous allons sérialiser un objet de type std::string :

std::string text="blablabla";
    std::string text2;
    std::ofstream ofs("FichierDeSerialisation");
    {
        odfaeg::OTextArchive oa(text);
        oa(text);
    }
    ofs.close();
Pour la lecture le code est similaire à part que l'on utilise les classe ifstream et ITextArchive :

std::ifstream ifs("FichierDeSerialisation");
{
    odfaeg::ITextArchive ia(ifs);
    ia(text2);        
}
std::cout<<text2<<std::endl;
ifs.close();
Pour sérialiser vos objets personnels, il suffit de redéfinir la méthode serialize dans la classe et de passer à l'archive toutes les variables de la classe.



struct A {
    A() {
        var = 10;
    }
        void foo(int i)
        { std::cout << i; }
        template <typename A>
        void serialize (A & ar) {
        ar(var);
        }
        int var;
};


Car c'est cette méthode que odfaeg va rechercher pour sérialiser l'objet dans l'archive, le code pour sérialiser l'objet dans le main est le même que pour les objets de types std::string.

Cette manière de faire est simple mais ne fonctionnera pas dans le cadre des objets polymorphique, en effet, quel donnée de l'objet faut t'il sérialiser, les données de la classe de base seulement, ou celles de la classe dérivée seulement, ou bien les deux ?

Par défaut odfaeg ne sérialize que les données de la classe de base.

Pour lui dire de sérialiser les données de la classe dérivée, il faut redéfinir une autre méthode : la méthode vtserialize.

Pour serializer un objet odfaeg utilise une classe dont il faut hériter dans la classe de base comme ceci :

La classe de base doit au moins avoir une méthode virtuelle pour pouvoir être considérée comme une classe polymorphique, car, odfaeg fait le test à l'exécution avec typeid, et l'héritage doit être pulibque! (Sinon ça ne fonctionnera pas)

struct B : public Registered<B> {
    B() {
        c = "serialize base";
    }
        virtual void foo()
        { std::cout << 1; }
        virtual void print() {
        std::cout<<c<<std::endl;
        }
        template <typename A>
        void vtserialize (A & ar) {
        ar(c);
        }
        virtual ~B();
        std::string c;  
};
 
B::~B(){}
Registered n'est rien d'autre qu'un objet qui va savoir comment sérialiser l'objet polymorphique, on doit lui passer en paramètre template la classe de Base.

Ensuite il ne faut pas oublié de redéfinir la méthode virtuelle temlplate vtserialize dans la classe dérivée.


struct C : B {
    C () {
        c = "serialize derived";
    }
    void foo();
    void print () {
        B::print();
        std::cout<<c<<std::endl;
    }
    template <typename A>
        void vtserialize (A & ar) {
        B::vtserialize(ar);
        ar(c);
        }
        std::string c;
};
 
void C::foo(){ std::cout << 2; }
Mais ce n'est pas tout, odfaeg sait comment sérialiser les objets polymorphiques, c'est grâce à la classe Registred héritée par la classe de base qu'il sait qu'il doit aussi sérialiser les attributs de la classe dérivée.

Mais il ne sait pas quelle fonction de la classe dérivé il doit appeler pour sérialiser les données ni quel allocator utiliser pour allouer les pointeurs sur les types de base pour les objets des classes dérivées, pour lui dire, il faut appeler  la macro EXPORT_CLASS_GUID dans la fonction main et lui passer 3 paramètres!

Le 1er paramètre est un id qui doit être unique pour chaque exportation, car on peut très bien avoir plusieurs classes dérivées pour une classe de base, ou bien même avoir des classes dérivées qui héritent de plusieurs classe de base! (héritage multiple)

Le second paramètre est le type de la classe de base dont hérite la classe Dérivée. 

Et le dernier paramètre est le type de la classe dérivée à exporter, ce qui donne le code final suivant :


struct B : public odfaeg::Registered<Base> {
    B() {
        c = "serialize base";
    }
    virtual void foo()
    { std::cout << 1; }
    virtual void print() {
    std::cout<<c<<std::endl;
    }
    template <typename A>
    void vtserialize (A & ar) {
    ar(c);
    }
    virtual ~B();
    std::string c;      
};
 
B::~B(){}
 
struct C : B {
    C () {
        c = "serialize derived";
    }
    void foo();
    void print () {
        B::print();
        std::cout<<c<<std::endl;
    }
    template <typename A>
        void vtserialize (A * ar) {
        B::vtserialize(ar);
        ar(c);
        }
        std::string c;
};
void C::foo(){ std::cout << 2; }
int main() {    
    EXPORT_CLASS_GUID(BC, B, C)
    C c;
    B* b = &c;
    B* b2;
    std::ofstream ofs("FichierDeSerialisation");
    odfaeg::OTextArchive oa(ofs);
    oa(b);
    std::ifstream ifs("FichierDeSerialisation");
    odfaeg::ITextArchive ia(ifs);
    ia(b2);
    b2->print();
}

                </html>
        </fr>
    </content>
</page>
