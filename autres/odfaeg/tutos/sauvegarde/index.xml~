<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/xsl/structure.xsl"?>
<page>
    <menu>/autres/odfaeg/xml/menu.xml</menu>
    <footer>/autres/odfaeg/xml/footer.xml</footer>
    <title>ODFAEG</title>
    <content>
        <fr>
                <html>
                        <h1>Chapitre XII : Le système de sauvegarde de odfaeg.</h1>

               		Créer des fonctions de callback :

odfaeg possède une classe spéciale pour pouvoir stocker des pointeurs de fonctions de type différents, des paramètres afin d'appeler ces fonctions plus tard, car, les commandes sont appelée dans un autre thread avec odfaeg que celui ou les arguments sont passé à la fonction de callback.
La seule contrainte est le type de retour de la fonctions de callback, qu'il faut mentionner à la classe.
Cette classe particulière porte le nom de odfaeg::FastDelegate. (Car elle va déléguer le travail à un autre foncteur)
Cette classe prend en paramètre le type de retour de la fonction de callback, et en arguments, un pointeur sur une fonction ainsi que les arguments de la fonctions de callback.
Pour ne pas devoir recréer le même delegate pour appeler plusieurs fois la même fonction de callback, la classe FastDelegate possède les fonctions setParam et bind pour les placeholders qui permettent de changer les paramètres de la fonction de callback avant de la rappeler.
La classe FastDelegate est très similaire à std::function et à std::bind, mais, à l'exception près que l'ont peut stocker tous les pointeurs de fonction retournant le même type dans un tableau si celle-ci on un nombre variable d'arguments ou bien des arguments de type différents, et c'est ce que fais la classe listener de odfaeg, cette classe permet de connecter des événements à des fonctions de callback et se charge d'appeler la bonne fonction de callback en fonction de l'événement généré.
Voici un exemple de code qui montre comment créer des delegates sur des fonctions de callback, les fonctions peuvent être soit des fonctions libres, des fonctions membres ou bien des fonctions anonymes, le passage par référence doit se faire via std::ref comme avec les std::function :
#include<iostream>
#include<string>
#include <fstream>
#include <functional>
#include "odfaeg/Core/fastDelegate.h"
#include "odfaeg/Core/serialization.impl"
using namespace std::literals;
using namespace std::placeholders;
 
void foo(int i, int j)
{ std::cout << i << j; }
 
struct A {
    A() {
        var = 10;
    }
        void foo(int i)
        { std::cout << i; }
        template <typename A>
        void serialize (A & ar) {
        ar(var);
        }
        int var;
};
 
struct B {
    B() {
        c = "serialize base";
    }
        virtual void foo()
        { std::cout << 1; }
        virtual void print() {
        std::cout<<c<<std::endl;
        }       
        virtual ~B();
        std::string c;  
};
 
B::~B(){}
 
struct C : B {
    C () {
        c = "serialize derived";
    }
    void foo();
    void print () {
        B::print();
        std::cout<<c<<std::endl;
    }   
    std::string c;
};
 
void C::foo(){ std::cout << 2; }

int main (int argv, char* argc[]) {
    void(*f)(int, int) = &foo;
    odfaeg::FastDelegate<void> f1(f, 3, 4);
    f1.setParams(5, 6);
        f1();
        std::cout << std::endl;
 
        odfaeg::FastDelegate<void> f2(
                [](int i, int j){ std::cout << i << j; },
                7,8
        );
        f2();
        f2.setParams(9,10);
        f2();
        std::cout << std::endl;
 
        int i = 11;
        odfaeg::FastDelegate<void> f3(
                [i](int j){ std::cout << i << j; },
                12
        );
        f3();
        f3.setParams(13);
        f3();
        std::cout << std::endl;
 
        A a;
        odfaeg::FastDelegate<void> f4(&A::foo,&a,14);
        f4();
        f4.setParams(&a,15);
        f4();
        std::cout << std::endl;
        odfaeg::FastDelegate<void> f5 = f1;
        f5();
        f5=f3;
        f5();
        std::cout << std::endl;
 
        C c;
        B* b = &c;
        odfaeg::FastDelegate<void> f6(&C::foo,&c);
        f6();
        f6.setParams(b);
        f6();
        std::cout << std::endl;
 
        odfaeg::FastDelegate<void> f7(D(),16);
        f7();
        f7.setParams(17);
        f7();
        std::cout << std::endl;
 
        odfaeg::FastDelegate<void> f8(bar,"ab"s);
        f8();
        f8.setParams("abc"s);
        f8();
        std::cout << std::endl;
        int pi = 1;
    odfaeg::FastDelegate<void> f9(foo, &pi);
        f9();
        std::cout << std::endl;
        pi=2;
        f9();
        std::cout << std::endl;
        odfaeg::FastDelegate<int> f10(goo,18);
        std::cout << f10();
        f10.setParams(19);
        std::cout << f10();
        std::cout << std::endl;
        void(*fu)(int&) = &foo;
        int vi=1;
        odfaeg::FastDelegate<void> f11(fu, std::ref(vi));
        f11();
        std::cout << std::endl;
        vi=2;
        f11();
        std::cout<<std::endl;
        return 0;
}
Et avec des placeholders :

void f (int i, int j, int l) {
    std::cout<<"i : "<<i<<" j : "<<j<<" l : "<<l<<std::endl;
}
int main (int argv, char* argc[]) {
	odfaeg::FastDelegate<void> fd(&f, 1, 2, odfaeg::ph<0,int>()) ;
	fd.bind(3);
	fd() ;
}

Créer des commandes : 

Maintenant que l'on sait comment créer des delegate, on va pouvoir créer des commandes que l'on connectera ensuite au listener à l'aide d'un identifiant.

ODFAEG permet de créer des commandes de 2 façons :

La première façon est de définir un ou plusieurs événements SFML qui déclencheront la commande.

Pour cela, odfaeg possède une classe Action qui permet de combiner plusieurs évènements SFML entre eux.

Ici nous allons définir une action qui se déclenche lorsque une des 4 touches suivante (Z, Q, S, D) est enfoncée :

pour cela, nous allons définir 4 actions que nous allons combiner ensemble, de la même manière que lorsqu'on combine des conditions avec les opérateurs ||, &&, | et !.

Action a1 (Action::EVENT_TYPE::KEY_HELD_DOWN, sf::Keyboard::Key::Z);
Action a2 (Action::EVENT_TYPE::KEY_HELD_DOWN, sf::Keyboard::Key::Q);
Action a3 (Action::EVENT_TYPE::KEY_HELD_DOWN, sf::Keyboard::Key::S);
Action a4 (Action::EVENT_TYPE::KEY_HELD_DOWN, sf::Keyboard::Key::D);
Action combined (a1 || a2 || a3 || a4);

Cette action doit ensuite être mappée à une commande, ceci se fait à l'aide de la classe Command, la commande n'est rien d'autre qu'une action liées à un pointeur de fonction (appelé un slot) ainsi que des paramètres qui seront envoyé à ce slot, pour créer un slot avec odfaeg ils suffit de créer un object de type FastDelegate<void> en lui passant en paramètre  un pointeur sur la fonction qu’appellera la commande lorsqu'elle sera déclenchée ainsi que la valeur des paramètres de la commande (ici je met Unknow car on ne connaît pas encore la touche qui a été pressée et le temps écoulé depuis le début de l'application)

L'avantage majeur de la classe FastDelegate est qu'elle peut stocker n'importe quelle type de fonction.

Command moveCommand(combined, FastDelegate<void>(&MyAppli::keyHeldDown, this, sf::Keyboard::Key::Unknown, realTime.restart()));

Nous lions donc notre action et notre slot à notre commande, voilà, nous avons créer la commande.

Connecter des commandes   : 

Une fois que la commande est créée nous devons la connecter au gestionnaire d'événement (au listener), le gestionnaire d'événement n'est rien d'autre qu'un thread qui exécute les commandes qu'on lui fournis de manière synchrone ou assynchrone en fonction des événements SFML généré par l'application. 

Pour connecter une commande il faut récupérer l'interpréteur de commande du gestionnaire d'événements, ceci se fait à l'aide de la méthode getListener()  de la classe InputSystem :

InputSystem::getListener().connect("MoveConnexion", moveCommand);

On fournis donc le nom de la connection ainsi que la commande.

Définir un trigger personnalisé pour une commande : 

Ce système est bien mais ne convient pas pour tout les cas, imaginez que vous devez déclenché une commande lorsque la souris est dans un rectangle, le principal soucis est que vous devez définir une action pour chaque pixel contenu dans le rectangle, ce qui n'est pas du tout pratique.
ODFAEG permet  de créer une commande avec une fonction spéciale. (appelée un trigger) 
C'est alors la fonction et non plus l'action qui va décider de l'exécution de la commande, voici un exemple, créons une fonction qui affiche quelque chose à l'écran lorsque la souris est dans le rectangle 0, 0, 100, 100 de la fenêtre de l'application :
 bool mouseInside (sf::Vector2f mousePos) {

        BoundingBox bx (0, 0, 0, 100, 100, 0);
        if (bx.isPointInside(Vec3f(mousePos.x, mousePos.y, 0))) {
            return true;
        }
        return false;
    }
    void onMouseInside (sf::Vector2f mousePos) {
        std::cout<<"Mouse inside : "<<mousePos.x<<" "<<mousePos.y<<std::endl;
    }

Nous avons 2 méthodes, une qui vérifie si la souris est dans le rectangle et une autre qui affiche un message en indiquant la position de la souris.

Créer un trigger s'effectue de la même manière que la création d'un slot, à l'exception près que le type du trigger est FastDelegate<bool>.

Le type de fonction et les paramètres du trigger et du slot doivent être les mêmes !

La création d'une commande avec un trigger se fait de la même manière que la création de la commande avec une action à l'exception prêt que c'est le trigger qu'on envoie et non plus l'action car ici la commande n'est pas liée à un ou plusieurs événements SFML mais directement à une fonction)  :
Command mouseInsideCommand(FastDelegate<bool>(&MyAppli::mouseInside,this,Vector2f(-1, -1)), FastDelegate<void>(&MyAppli::onMouseInside, this, Vector2f(-1,-1)));

InputSystem::getListener().connect(« mouseInsideCommand »,mouseInsideCommand) ;
On met -1, -1 pour la valeur de la position de la souris car on ne la connais pas encore, ceci évite d'afficher le message au lancement de l'application lorsque la fenêtre n'est pas encore affichée.

Il existe une dernière et troisième méthode qui permet de passer un trigger, une action et un slot à une Commande, la commande sera alors exécutée si le trigger ainsi que l'action  sont déclenchés.

                </html>
        </fr>
    </content>
</page>
