<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/xsl/structure.xsl"?>
<page>
    <menu>/autres/odfaeg/xml/menu.xml</menu>
    <footer>/autres/odfaeg/xml/footer.xml</footer>
    <title>ODFAEG</title>
    <content>
        <fr>
                <html>
                        <h1>Chapitre IV : Le système de commandes.</h1>

               		<h2>Créer des fonctions de callback : </h2>

<p>
odfaeg possède une classe spéciale pour pouvoir stocker des pointeurs de fonctions de <br/> 
type différents, des paramètres afin d'appeler ces fonctions plus tard, car, les commandes sont appelée dans <br/>
un autre thread avec odfaeg que celui ou les arguments sont <br/> 
passé à la fonction de callback. <br/>
</p>

<p>
La seule contrainte est le type de retour de la fonctions de callback, qu'il faut <br/> 
mentionner à la classe. <br/>
Cette classe particulière porte le nom de odfaeg::FastDelegate. (Car elle va déléguer le <br/> 
travail à un autre foncteur) <br/>
Cette classe prend en paramètre le type de retour de la fonction de callback, et en <br/> 
arguments, un pointeur sur une fonction ainsi que les arguments de la fonctions de callback. <br/>
</p>

<p>
Pour ne pas devoir recréer le même delegate pour appeler plusieurs fois la même fonction de <br/> 
callback, la classe FastDelegate possède les fonctions setParam et bind pour les <br/> 
placeholders qui permettent de changer les paramètres de la fonction de callback avant de <br/> 
la rappeler. <br/>
</p>

<p>
La classe FastDelegate est très similaire à std::function et à std::bind, mais, à <br/> 
l'exception près que l'ont peut stocker tous les pointeurs de fonction retournant le même <br/> 
type dans un tableau si celle-ci on un nombre variable d'arguments ou bien des <br/> 
arguments de type différents, et c'est ce que fais la classe listener de odfaeg, cette <br/> 
classe permet de connecter des événements à des fonctions de callback et se charge <br/> 
d'appeler la bonne fonction de callback en fonction de l'événement généré. <br/>
</p>

<p>
Voici un exemple de code qui montre comment créer des delegates sur des fonctions de <br/> 
callback, les fonctions peuvent être soit des fonctions libres, des fonctions membres ou <br/> 
bien des fonctions anonymes, le passage par référence doit se faire via std::ref <br/> 
comme avec les std::function : <br/>
<pre>
#include&lt;iostream&gt;
#include&lt;string&gt;
#include &lt;fstream&gt;
#include &lt;functional&gt;
#include "odfaeg/Core/fastDelegate.h"
#include "odfaeg/Core/serialization.impl"
using namespace std::literals;
using namespace std::placeholders;
void foo(int i, int j)
{ std::cout &lt;&lt; i &lt;&lt; j; }
struct A {
A() {
var = 10;
}
        void foo(int i)
        { std::cout &lt;&lt; i; }
        template &lt;typename A&gt;
        void serialize (A &amp; ar) {
        ar(var);
        }
        int var;
};
struct B {
B() {
 c = "serialize base";
}
virtual void foo()
{ std::cout &lt;&lt; 1; }
virtual void print() {
   std::cout&lt;&lt;c&lt;&lt;std::endl;
}       
virtual ~B();
        std::string c;  
};
B::~B(){}
struct C,: B {
 C () {
 c = "serialize derived";
 }
 void foo();
 void print () {
 B::print();
std::cout&lt;&lt;c&lt;&lt;std::endl;
} 
std::string c;
};
void C::foo(){ std::cout &lt;&lt; 2; }

int main (int argv, char* argc[]) {
void(*f)(int, int) = &amp;foo;
odfaeg::FastDelegate&lt;void&gt; f1(f, 3, 4);
f1.setParams(5, 6);
        f1();
        std::cout &lt;&lt; std::endl;
        odfaeg::FastDelegate&lt;void&gt; f2(
                [](int i, int j){ std::cout &lt;&lt; i &lt;&lt; j; },
                7,8
        );
        f2();
        f2.setParams(9,10);
        f2();
        std::cout &lt;&lt; std::endl;
        int i = 11;
        odfaeg::FastDelegate&lt;void&gt; f3(
                [i](int j){ std::cout &lt;&lt; i &lt;&lt; j; },
                12
        );
        f3();
        f3.setParams(13);
        f3();
        std::cout &lt;&lt; std::endl;
        A a;
        odfaeg::FastDelegate&lt;void&gt; f4(&amp;A::foo,&amp;,14);
        f4();
        f4.setParams(&amp;,15);
        f4();
        std::cout &lt;&lt; std::endl;
        odfaeg::FastDelegate&lt;void&gt; f5 = f1;
        f5();
        f5=f3;
        f5();
        std::cout &lt;&lt; std::endl;
        C c;
        B* b = &amp;;
        odfaeg::FastDelegate&lt;void&gt; f6(&amp;::foo,&amp;);
        f6();
        f6.setParams(b);
        f6();
        std::cout &lt;&lt; std::endl;
        odfaeg::FastDelegate&lt;void&gt; f7(D(),16);
        f7();
        f7.setParams(17);
        f7();
        std::cout &lt;&lt; std::endl;
        odfaeg::FastDelegate&lt;void&gt; f8(bar,"ab"s);
        f8();
        f8.setParams("abc"s);
        f8();
        std::cout &lt;&lt; std::endl;
        int pi = 1;
        odfaeg::FastDelegate&lt;void&gt; f9(foo, &amp;pi);
        f9();
        std::cout &lt;&lt; std::endl;
        pi=2;
        f9();
        std::cout &lt;&lt; std::endl;
        odfaeg::FastDelegate&lt;int&gt; f10(goo,18);
        std::cout &lt;&lt; f10();
        f10.setParams(19);
        std::cout &lt;&lt; f10();
        std::cout &lt;&lt; std::endl;
        void(*fu)(int&amp;) = &amp;foo;
        int vi=1;
        odfaeg::FastDelegate&lt;void&gt; f11(fu, std::ref(vi));
        f11();
        std::cout&lt;&lt;std::endl;
        vi=2;
        f11();
        std::cout&lt;&lt;std::endl;
        return 0;
}
</pre>
<br/>
Et avec des placeholders :
<br/>
<pre>
void f (int i, int j, int l) {
     std::cout&lt;&lt;"i : "&lt;&lt;i&lt;&lt;" j : "&lt;&lt;j&lt;&lt;" l : "&lt;&lt;l&lt;&lt;std::endl;
}
int main (int argv, char* argc[]) {
	odfaeg::FastDelegate&lt;void&gt; fd(&amp;f, 1, 2, odfaeg::ph&lt;0,int&gt;());
	fd.bind(3);
	fd();
}
</pre>

<h2>Créer des commandes : </h2>

<p>
Maintenant que l'on sait comment créer des delegate, on va pouvoir créer des commandes <br/> 
que l'on connectera ensuite au listener à l'aide d'un identifiant. <br/>

ODFAEG permet de créer des commandes de 2 façons : <br/>

La première façon est de définir un ou plusieurs événements SFML qui déclencheront la <br/> commande. <br/>
</p>

<p>
Pour cela, odfaeg possède une classe Action qui permet de combiner plusieurs évènements<br/>
SFML entre eux. <br/>

Ici nous allons définir une action qui se déclenche lorsque une des 4 touches suivante (Z, <br/> Q, S, D) est enfoncée : <br/>

pour cela, nous allons définir 4 actions que nous allons combiner ensemble, de la même <br/> manière que lorsqu'on combine des conditions avec les opérateurs ||, &amp;&amp;, | et !.<br/>

<pre>
Action a1 (Action::EVENT_TYPE::KEY_HELD_DOWN, sf::Keyboard::Key::Z);
Action a2 (Action::EVENT_TYPE::KEY_HELD_DOWN, sf::Keyboard::Key::Q);
Action a3 (Action::EVENT_TYPE::KEY_HELD_DOWN, sf::Keyboard::Key::S);
Action a4 (Action::EVENT_TYPE::KEY_HELD_DOWN, sf::Keyboard::Key::D);
Action combined (a1 || a2 || a3 || a4);
</pre>
</p>

<p>
Cette action doit ensuite être mappée à une commande, ceci se fait à l'aide de la classe <br/> Command, la commande n'est rien d'autre qu'une action liées à un pointeur de fonction <br/> (appelé un slot) ainsi que des paramètres qui seront envoyé à ce slot, pour créer un <br/> slot avec odfaeg ils suffit de créer un object de type FastDelegate<void> en lui <br/> passant en paramètre  un pointeur sur la fonction qu’appellera la commande lorsqu'elle sera <br/> déclenchée ainsi que la valeur des paramètres de la commande (ici je met Unknow car <br/> on ne connaît pas encore la touche qui a été pressée et le temps écoulé depuis le <br/> début de l'application) <br/>

L'avantage majeur de la classe FastDelegate est qu'elle peut stocker n'importe quelle type <br/> de fonction. <br/>
<pre>
Command moveCommand(combined, FastDelegate&lt;void&gt;(&amp;MyAppli::keyHeldDown, this,
sf::Keyboard::Key::Unknown, realTime.restart())); <br/>
</pre>

Nous lions donc notre action et notre slot à notre commande, voilà, nous avons créer la <br/>
commande. <br/>
</p>

<h2>Connecter des commandes   : </h2>

<p>
Une fois que la commande est créée nous devons la connecter au gestionnaire d'événement <br/> 
(au listener), le gestionnaire d'événement n'est rien d'autre qu'un thread qui <br/> 
exécute les commandes qu'on lui fournis de manière synchrone ou assynchrone en fonction des <br/> 
événements SFML généré par l'application. <br/>
</p>

<p>
Pour connecter une commande il faut récupérer l'interpréteur de commande du gestionnaire <br/> 
d'événements, ceci se fait à l'aide de la méthode getListener()  de la classe <br/> 
InputSystem : <br/>

InputSystem::getListener().connect("MoveConnexion", moveCommand); <br/>

On fournis donc le nom de la connection ainsi que la commande. <br/>
</p>

<h2>Définir un trigger personnalisé pour une command : </h2>

<p>
Ce système est bien mais ne convient pas pour tout les cas, imaginez que vous devez <br/> 
déclenché une commande lorsque la souris est dans un rectangle, le principal soucis est que <br/> 
vous devez définir une action pour chaque pixel contenu dans le rectangle, ce qui <br/> 
n'est pas du tout pratique. <br/> 
</p>

<p>
ODFAEG permet  de créer une commande avec une fonction spéciale. (appelée un trigger) <br/>
C'est alors la fonction et non plus l'action qui va décider de l'exécution de la commande, <br/> 
voici un exemple, créons une fonction qui affiche quelque chose à l'écran lorsque la <br/> 
souris est dans le rectangle 0, 0, 100, 100 de la fenêtre de l'application : <br/>
<pre>
 bool mouseInside (sf::Vector2f mousePos) {

        BoundingBox bx (0, 0, 0, 100, 100, 0);
        if (bx.isPointInside(Vec3f(mousePos.x, mousePos.y, 0))) {
            return true;
        }
        return false;
    }
    void onMouseInside (sf::Vector2f mousePos) {
        std::cout&lt;&lt;"Mouse inside : "&lt;&lt;mousePos.x&lt;&lt;" "&lt;&lt;mousePos.y&lt;&lt;std::endl;
    }
</pre>
</p>

<p>
Nous avons 2 méthodes, une qui vérifie si la souris est dans le rectangle et une autre qui <br/> 
affiche un message en indiquant la position de la souris. <br/>

Créer un trigger s'effectue de la même manière que la création d'un slot, à l'exception <br/>
près que le type du trigger est FastDelegate&lt;bool&gt;. <br/>

Le type de fonction et les paramètres du trigger et du slot doivent être les mêmes! <br/>
</p>

<p>
La création d'une commande avec un trigger se fait de la même manière que la création de la <br/> 
commande avec une action à l'exception prêt que c'est le trigger qu'on envoie et non <br/> 
plus l'action car ici la commande n'est pas liée à un ou plusieurs événements SFML <br/> 
mais directement à une fonction) : <br/>
<pre>
Command mouseInsideCommand(FastDelegate&lt;bool&gt;(&amp;MyAppli::mouseInside,this,Vector2f(-1, -1)),
FastDelegate&lt;void&gt;(&amp;MyAppli::onMouseInside, this, Vector2f(-1,-1))); 
</pre>
</p>

<p>
InputSystem::getListener().connect(«mouseInsideCommand»,mouseInsideCommand); <br/>
On met -1, -1 pour la valeur de la position de la souris car on ne la connais pas encore,<br/> 
ceci évite d'afficher le message au lancement de l'application lorsque la <br/> 
fenêtre n'est pas encore affichée. <br/>
</p>

<p>
Il existe une dernière et troisième méthode qui permet de passer un trigger, une <br/> 
action et un slot à une Commande, la commande sera alors exécutée si le trigger ainsi que <br/> 
l'action  sont déclenchés. <br/>
</p>

                </html>
        </fr>
    </content>
</page>
