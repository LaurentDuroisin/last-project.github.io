<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/xsl/structure.xsl"?>
<page>
    <menu>/autres/odfaeg/xml/menu.xml</menu>
    <footer>/autres/odfaeg/xml/footer.xml</footer>
    <title>ODFAEG</title>
    <content>
        <fr>
                <html>
                        <h1>Chaptire IX : Les classes utilitaires de odfaeg. </h1>

             Les variants :

Tout comme boost, odfaeg possède quelque classe utilitaires qui sont utilisées lors du codage du gameplay et l'application de comportements différents suivant les différents type d'entités. (A la diffence prêt qu'elles utilisent le nouveau standart c++14.)

Voici un exemple de code utilisant un variant qui permet d'appliquer deux comportement différent pour une classe A et B.

class Chien {
};
 
class Chat {
};
 
struct Attaquer : public odfaeg::Visitor<> {
       void operator()(Chat& chat) {
            std::cout<<"griffe!"<<std::endl;
       }
       void operator()(Chien& chien) {
            std::cout<<"mort!"<<std::endl;
       }     
};
Et dans le main il suffit juste de faire ceci :
Chat chat;
Chien chien;
std::vector<odfaeg::Variant<Chien, Chat>> vector;
vector.push_back(odfaeg::Variant<Chien, Chat>(chat));
vector.push_back(odfaeg::Variant<Chien, Chat>(chien));
Attaquer attaquer;
for (unsigned int i = 0; i < vector.size(); i++) {
     odfaeg::apply_visitor(attaquer, vector[i]);
}

Une autre méthode : 
odfaeg possède une autre méthode mettant permettant de faire cela à l'aide d'une interface pour les diffent type d'entités, et d'appliquer un multiple dispatch dessus comme ceci :

struct chat;
struct chien;
 
struct animal
        : odfaeg::accept_visitor<animal,chat,chien>
{ };
 
struct chat
        : odfaeg::acceptable<animal,chat>
{ };
 
struct chien
        : odfaeg::acceptable<animal,chien>
{ };
struct attaquer
        : odfaeg::dispatchable<attaquer,animal>
{
        void operator()(const chat&amp;, const chat&amp;) const
        { std::cout <<  "griffe - griffe" << std::endl;}
        void operator()(const chat&amp;, const chien&amp;) const
        { std::cout <<  "griffe - mord  " << std::endl;}
        void operator()(const chien&amp;, const chat&amp;) const
        { std::cout <<  "mord - griffe" << std::endl;}
        void operator()(const chien&amp;, const chien&amp;) const
        { std::cout << "mord - mord  " << std::endl;}
};
chat c1;
chien c2; 
animal& a1 =c1;
animal& a2 =c2; 
attaquer().apply(a1,a1);
attaquer().apply(a1,a2);
attaquer().apply(a2,a1);
attaquer().apply(a2,a2);

                </html>
        </fr>
    </content>
</page>
