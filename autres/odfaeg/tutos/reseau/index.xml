<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/xsl/structure.xsl"?>
<page>
    <menu>/autres/odfaeg/xml/menu.xml</menu>
    <footer>/autres/odfaeg/xml/footer.xml</footer>
    <title>ODFAEG</title>
    <content>
        <fr>
                <html>
                        <h1>Chapitre XIII : le réseau</h1>

               <h2>Le serveur : </h2>

<p>
Pour créer une application serveur, il suffit juste de faire une classe qui hérite de la <br/> 
classe application comme vu dans le chapitre II, et on peut redéfinir les méthodes <br/>
onExec, onInit et onLoad. <br/>

OnLoad permet de charger les ressources utilisées par le serveur (en principe un serveur ne <br/> 
charge pas de resource vu que c'est le client qui affiche tout mais il peut par <br/> 
exemple charger les données d'une map dans un fichier ou bien des données sur les joueurs <br/> 
dans une bases de données) <br/>

Pour le moment ODFAEG ne permet pas la communication avec un SGDB sans l'utilisation d'une <br/>
librairie externe mais ça sera à venir dans une version future. (La dernière version  <br/>
très probablement) <br/>
</p>

<p>
Pour pouvoir établir la communication entre le serveur et le client il faut créer un <br/>
serveur et le faire écouter sur un port, ceci est possible grace à la classe Network, le <br/>
moteur réseau de ODFAEG gère 2 protocoles pour la communication : le protocole TCP et <br/>
le protocole UDP. <br/>

Pour lancer le serveur et le faire écouter sur un port tcp et udp, il suffit d'appeler la <br/>
méthode suivante de la classe Network : <br/>

Network::startSrv(portTCP, portUDP); <br/>

Cette fonction démarre le serveur et puis rend la main ce qui nous permet de passer à la <br/>
méthode exec dans le main : <br/>

<pre>
Application app ;
Network::startSrv(portTCP, portUDP) ;
return app.exec() ;
</pre>
</p>

<h2>Récupérer une requête envoyée par un client : </h2>

<p>
Pour récupérer une requête envoyée par un client, il suffit d'appeler la méthode<br/> 
getLastRequest de la classe network, cette méthode peut prendre en paramètre un object de<br/> 
type user, la classe user contient des informations qui identifie le client sur le<br/> 
réseau, on peut donc récupérer les informations sur le client qui a envoyé la <br/> 
requête et renvoyer une réponse au client en appelant les méthode sendTCPPacket et <br/> 
sendUDPPacket de la classe user. <br/>
</p>

<p>
La classe user peut être redéfinie si nous avons besoin de stocker d'autre informations <br/> 
comme par exemple un mot de passe et un nom d'utilisateur si il doit y avoir un <br/> 
système d'authentification. <br/>
</p>

<p>
La classe Network possède aussi une méthode sendTcpPacket et sendUdpPacket, dans ce cas, <br/>
le packet sera envoyé a tout les utilisateurs connecté au serveur. <br/>
On peut aussi récupérer le ping d'un utilisateur. <br/>
En mode TCP, on peut envoyer deux types de packets, des bêtes paquets de type sf::packet ou <br/>
bien, des packets chiffrés de type odfaeg::network::SymEncPacket si le client utilise une <br/>
connection SSL. (pour le savoir il suffit d'appeler la méthode isUsingSecuredConnection de <br/>
la classe user.) <br/>
Attention : en mode udp les packets ne sont pas chiffrés! <br/>
</p>

<h2>Le client : </h2>

<p>Pour connecter un client à un serveur, il suffit d'appeler en plus cette méthode dans le <br/>
main  en lui passant le port TCP du serveur, le port UDP du serveur, et l'adresse ip <br/> 
du serveur. <br/>

Network::startCli(portTCP, portUDP, ipAddress)  <br/>
</p>

<p>
Pour récupérer les réponses reçue par le serveur il suffit d'appeler la méthode <br/>
getLastResponse de la classe Network. (ou bien getResponse(« Tag »)) pour récupérer une <br/>
réponse précise précédée par un tag au choix. <br/>

Nous pouvons aussi appeler la méthode waitForLastResponse avec un timeout. <br/>

Par défault le client utilise une connection chiffrée en mode TCP mais si l'on ne veut pas <br/> 
utiliser de connection chiffrée on peut passer false en 4ème paramètre à la méthode <br/> 
startCli. <br/>
</p>
                </html>
        </fr>
        <en>
            <html>
                <h1>Chapter III : The network</h1>
                <h2>The server : </h2>
                    To create a server application, you just have to make a classe which inherits, <br/>
                    from the application class, like in the chapter II. <br/>
                    You can then redefine the methods onExec(), onInit() and onLoad().<br/>
                    onLoad allows you to load external resource in a file or in a database.<br/>
                    ODFAEG doesn't have SQL drivers for the moment, this is for a later version.<br/>
                    To establish a communication between the client and a server, ODFAEG have a static class : <br/>
                    The Network class.<br/>
                    ODFAEG manage two protocols : TCP and UDP.<br/>
                    To launch the server, you just need to call this function : <br/>
                    Network::startSrv(portTCP, portUDP); <br/>
                    This function starts the server, and then gives the hand.<br/>
                    So, you can instanciate the application : <br/>
                    <pre>
                    Application app ;
                    Network::startSrv(portTCP, portUDP) ;
                    return app.exec() ;
                    </pre>
                    <h2>Get a request send by the client.</h2>
                    To get a request, you just have to class the getLastRequest method of the Network<br/>
                    class.
                    This method can take an object of the user class, the user contains just<br/>
                    informations of the client which have send the request.<br/>
                    You can send a response by callind the sendTCPPacket and sndUDPPacket of the class user. </b>
                    The user class can be redefined if you need to store other informations sush a password or a login.<br/>
                    The class network have also sendTCPPacket and sendUDPPacket methods, in this case, every <br/>
                    packet'll be send to each clients connected to the network.<br/>
                    You can send both type of packet, with the TCP protocol, crypted packet or uncrypted packet.<br/>
                    To know if the user is using an SSL connexion, you can call the method isUsingSecuredConnection of the user<br/>
                    class.<br/>
                    Be carefull, because with the UDP protocol, the packets are not crypted!<br/>
                    <h2>The client : </h2>
                    To connect a client to a server, you just need to call the same method of the network class.<br/>
                    You have to pass more parameters : <br/>
                    The first and the second are the TCP and the UDP port used.<br/>
                    The last is the IpAddress of the server.<br/>
                    We can add a fourth parameter, by default this parameter is true and indicate if you want<br/>
                    to use a securised connexion.<br/>
                    But if you don't want to use a crypted connexion, set this parameter to false.<br/>
            </html>
        </en>
    </content>
</page>
