<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/xsl/structure.xsl"?>
<page>
    <menu>/autres/odfaeg/xml/menu.xml</menu>
    <footer>/autres/odfaeg/xml/footer.xml</footer>
    <title>ODFAEG</title>
    <content>
        <fr>
                <html>
                        <h1>Chapitre VIII : Le système des states. </h1>

              <h2>Créer un state : </h2>

<p>
Avant de créer un state il faut redéfinir 2 fonctions qui applique et annule le state,<br/> 
pour cela il faut hériter de la classe StateExecutor et redéfinir les 2 <br/> méthodes suivantes : <br/>

doState(State) et undoState(State), celles-ci prenne en paramètre le state courant. <br/>

Pour créer un state il suffit de lui passer un nom et un pointeur sur un objet d'un type <br/>
dérivé de StateExecutor. <br/></p>

<p>Nous pouvons par la suite, ajouter des paramètres à notre state, et les récupérer dans <br/> 
notre méthode de notre classe dérivée de StateExecuror: <br/>

MyState state(« The state », &amp;myStateExecutor); <br/>

state.addParameter(«ParamName», paramValue); <br/>

La valeur peut être de n'importe quel type il faudra donc préciser son type lors de la <br/> récupération : <br/>

ParamType value = state.getParameter(«ParamName»).getValue&lt;ParamType&gt; <br/>
</p>

<p>
Nous pouvons associer plusieurs states à un groupe grâce à la classe StateGroup.<br/>

Nous pouvons aussi ajouté des groupes de states dans une pile avec la classe StateStack <br/>
afin d'appliquer les derniers states qui  ont été annulés ou bien d'annuler les derniers <br/>
states qui ont été appliqué. <br/>

Ceci est surtout utile dans les applications si par exemple vous souhaiter faire un éditeur <br/>
de map pour votre jeux. <br/>

Mais nous n'en somme pas encore là donc je rentrerai dans les détails en temps voulu. <br/>

Chaque entité odfaeg possède un state qui peut prendre un ou plusieurs paramètres <br/>
personnalisé, ce qui évite de devoir faire trop d'héritage lors de la création d'entités <br/>
personnalisées. <br/></p>

<p>
Les fonctions pour ajouter des nouveau attributs à nos entités s'appellent addAttribute<br/>
et getAttribute, removeAttribute et changeAttribute et fonctionnent de la <br/>
même façon que addParameter, getParameter, removeParameter et changeParameter. <br/>
</p>

<p>
Pour modifier appliquer ou annuler un state d'une entité il suffit d'appelé les méthodes <br/>
interract et uninterract de la classe entity en lui passant un pointeur vers le state <br/>
executor qui va modifier le state de l'entité. <br/>
</p>
                </html>
        </fr>
        <en>
            <html>
                <h1>Chapter VIII : the states system.</h1>
                <h2>Create a state</h2>
                    Before creating a states, you have to redefine two functions : <br/>
                    One which'll apply the state and the other which'll unapply the states.<br/>
                    For that, you need to inherits from the class StateExecutor and redefines those <br/>
                    methods : <br/>
                    doState(State);<br/>
                    undoState(State);<br/>
                    These methods take a parameter : the current state.<br/>
                    Next, you can add parameters to your state, and get parameters like this : <br/>
                    MyState state(« The state », &amp;myStateExecutor); <br/>
                    state.addParameter(«ParamName», paramValue); <br/>
                    The value can be of any type, you must pass the type as template parameter, <br/>
                    state.getParameter(«ParamName»).getValue&lt;ParamType&gt;
                    You can add states to a group of states, and then, you can add groups<br/>
                    to the stack, so, you can apply and unapply the states which were applied.<br/>
                    Each odfaeg's entities have a state, and, this state can take several custom parameters.<br/>
                    It avoid to have to do too much inheritance.<br/>
                    The methods to add attributes to entities are called addAttribute, getAttribute and <br/>
                    removeAttribute, and changeAtribute, they work exactly like the addParameter,<br/>
                    getParameter, removeParamete and changeParameter.<br/>
                    To apply or cancel a state, you can call the methode interract and uninterract, <br/>
                    by passing a pointer to a state executor object, which'll modify the state of the entity.<br/>
            </html>
        </en>
    </content>
</page>
