<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/xsl/structure.xsl"?>
<page>
    <menu>/autres/odfaeg/xml/menu.xml</menu>
    <footer>/autres/odfaeg/xml/footer.xml</footer>
    <title>ODFAEG</title>
    <content>
        <fr>
                <html>
                        <h1>Chapitre XIII : le réseau</h1>

               Le serveur : 

Pour créer une application serveur, il suffit juste de faire une classe qui hérite de la classe application comme vu dans le chapitre II, et on peut redéfinir les méthodes onExec, onInit et onLoad.

OnLoad permet de charger les ressources utilisées par le serveur (en principe un serveur ne charge pas de resource vu que c'est le client qui affiche tout mais il peut par exemple charger les données d'une map dans un fichier ou bien des données sur les joueurs dans une bases de données)

Pour le moment ODFAEG ne permet pas la communication avec un SGDB sans l'utilisation d'une librairie externe mais ça sera à venir dans une version future. (La dernière version très probablement)

Pour pouvoir établir la comunication entre le serveur et le client il faut créer un serveur et le faire écouter sur un port, ceci est possible grace à la classe Network, le moteur réseau de ODFAEG gère 2 protocoles pour la communication : le protocole TCP et le protocole UDP.

Pour lancer le serveur et le faire écouter sur un port tcp et udp, il suffit d'appeler la méthode suivante de la classe Network :

Network::startSrv(portTCP, portUDP) ;

Cette fonction démarre le serveur et puis rend la main ce qui nous permet de passer à la méthode exec dans le main :

Application app ;
Network::startSrv(portTCP, portUDP) ;
return app.exec() ;

Récupérer une requête envoyée par un client :

Pour récupérer une requête envoyée par un client, il suffit d'appeler la méthode getLastRequest de la classe network, cette méthode peut prendre en paramètre un object de type user, la classe user contient des informations qui identifie le client sur le réseau, on peut donc récupérer les informations sur le client qui a envoyé la requête et renvoyer une réponse au client en appelant les méthode sendTCPPacket et sendUDPPacket de la classe client.

La classe user peut être redéfinie si nous avons besoin de stocker d'autre informations comme par   exemple un mot de passe et un nom d'utilisateur si il doit y avoir un système d'authentification.

La classe Network possède aussi une méthode sendTcpPacket et sendUdpPacket, dans ce cas, le packet sera envoyé a tout les utilisateurs connecté sur le réseau.
On peut aussi récupérer le ping d'une utilisateur.
En mode TCP, on peut envoyer deux types de packets, des bêtes paquets de type sf::packet ou bien, des packets chiffrés de type odfaeg::SymEncPacket si le client utilise une connection SSL. (pour le savoir il suffit d'appeler la méthode isUsingSecuredConnection de la classe user.
Attention : en mode udp les packets ne sont pas chiffrés.
Le client : 

Pour connecter un client à un serveur, il suffit d'appeler en plus cette méthode dans le main  en lui passant le port TCP du serveur, le port UDP du serveur, et l'adresse ip du serveur.

Network::startCli(portTCP, portUDP, ipAddress) 

Pour récupérer les réponses reçus par le serveur il suffit d'appeler la méthode getLastResponse de la classe Network. (ou bien getResponse(« Tag »)) pour récupérer une réponse précise précédée par un tag au choix.

Nous pouvons aussi appeler la méthode waitForLastResponse avec un timeout.

Par défault le client utilise une connection chiffrée en mode TCP mais si l'on ne veut pas utiliser de connection chiffrée on peut passer false en 4ème paramètre à la méthode startCli.
                </html>
        </fr>
    </content>
</page>
