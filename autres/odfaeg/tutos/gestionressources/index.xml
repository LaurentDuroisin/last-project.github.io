<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/xsl/structure.xsl"?>
<page>
    <menu>/autres/odfaeg/xml/menu.xml</menu>
    <footer>/autres/odfaeg/xml/footer.xml</footer>
    <title>ODFAEG</title>
    <content>
        <fr>
                <html>
                        <h1>Chapitre III : le système de gestion des ressources externes</h1>

<h2>Charger et récupérer des ressource externes : </h2>

<p>
Pour charger des ressources externes, odfaeg utilise 2 classes : <br/>

ResourceManager : permet de charger toutes des ressources d'un seul et même type. <br/>

Resource cache : permet de charger des ressources de type différents : <br/>

Essayons par exemple de charger un tileset contenant toute des textures d'herbe, pour cela, 
<br/> il faut d'abord créer un gestionnaire de texture comme ceci : <br/>

odfaeg::ResourceManager&lt;odfaeg::Texture&gt; tm; <br/>
</p>
<!--<p>
Le 1er paramètre est le type des ressources externe et le second, le type de l'identifiant <br/> pour la ressource. (par défaut il vaut std::string) <br/>

odfaeg possède également quelques classes prédéfinie pour les classes de sfml chargeant des<br> ressources : TextureManager, SoundManager, FontManager, ShaderManager.<br/>
Celle-ci ne prennent qu'un seul paramètre template qui vaut std::string par défault.<br/>
Voici comment instancier un gestionnaire de ressources de type odfaeg::Texture par exemple : <br/>
TextureManager<> tm; <br></p>
<p>
L'identifiant est comme un alias qui pointe vers une ressource, ici par exemple je vais<br/> créer une énumération qui référencera les différentes ressources dans l'application : <br/>
Il existe aussi des classes particulières pour les gestionnaires de ressources pour les <br/> types de ressources  <br/>

<pre>
enum TEXTURES {
        GRASS
};
</pre>

<p>
Pour charger la ressource il suffit d'appeler la fonction fromFile du gestionnaitre de <br/> ressource si on veut la changer à partir d'un fichier : <br/>

tm->fromFile("tilesets/herbe.png", GRASS); <br/>

Le 1er paramètre est l'emplacement de la ressource par rapport à l'application, le second <br/> paramètre est l'alias qui pointe vers la ressource. (On n'est pas obligé de le <br/> précisé, dans ce cas la ressource ne sera accessible que par son 1er paramètre c'est à dire <br/> sont chemin, mais c'est déconseillé de procédé comme ça.) <br/>

<h2>Utiliser un cache.

<p>
On peut ajouter les gestionnaires de ressources dans un cache, ceci est pratique si vous <br/> devez charger des ressources externes de différent types. <br/>
La classe resource cache prend un paramètre template : le type de l'identifiant qui <br/> référencera le gestionnaire de ressource. (Par défault le type est std::string) <br/>
ResourceCache<> cache ; <br/>
cache.addResourceManager(tm, "TextureManager"); <br/>
Cette fonction prend en paramètre le gestionnaire de ressources à stocker dans le cache  <br/> ainsi que le nom du ressource manager. <br/></p>

<p>
Ensuite vous pouvez récupérer le gestionnaire de ressource comme suit : <br/>

TextureManager<> tm = cache.resourceManager<odfaeg::Texture, TEXTURES>("TextureManager"); <br/>

En précisant le type de gestionnaire de ressources à récupérer dans le cache et le type de <br/> l'identifiant utilisé dans le gestionnaire de ressources. <br/>

Pour récupérer la ressource il suffit ensuite d'écrire ceci : <br/>

tm.getResourceByAlias(GRASS); <br/>

On peut récupérer la ressource de deux façons : soit par son alias ou bien par son chemin. <br/>


<h2> Charger des ressources avec son propre chargeur de ressource. </h2>

<p>Supposons maintenant que nous voulons charger des ressources externes mais que le <br/> gestionnaire d'odfaeg ne possède pas de fonction pour charger ce type de ressource, pour <br/> cela il faut d'abord créer un chargeur personnalisé (par exemple un chargeur de <br/> fichier .3ds) et ensuite il faut passer la fonction qui charge la ressource au gestionnaire <br/> de ressources en créant un foncteur comme ceci : <br/>

std::function<bool(Object3DS,std::string> loadFunc(&MyLoader::fromFile); <br/>

Ensuite nous devons passez cette fonction à la fonction load du resource manager : <br/>

<pre>
ResourceManager<Object3DS, OBJECTS3DS> om ;
om.load(loadFunc, « resource location ») ;
</pre>

<p>
Voila, le chargeur de ressource externe de odfaeg n'est pas compliqué et possède pas mal de <br/> fonction utilitaire comme par exemple récupérer tout les chemins vers les ressources <br/> d'un même type qui ont été chargée. <br/>
</p>

<h2>La destruction des ressources : </h2>

<p>La destruction des ressource ce fait automatiquement à la destruction du cache, lors de <br/> l'arrêt du programme, cependant, on peut le faire explicitement en appelant les <br/> fonctions deleteResouceByAlias ou bien deleteResourceByPath si on en a plus besoin.<br/></p>-->

                </html>
        </fr>
    </content>
</page>
