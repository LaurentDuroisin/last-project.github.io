<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/xsl/structure.xsl"?>
<page>
    <menu>/autres/odfaeg/xml/menu.xml</menu>
    <footer>/autres/odfaeg/xml/footer.xml</footer>
    <title>ODFAEG</title>
    <content>
        <fr>
                <html>
                        <h1>Chapitre III : le système de gestion des ressources externes</h1>

<h2>Charger et récupérer des ressource externes : </h2>

<p>
Pour charger des ressources externes, odfaeg utilise 2 classes : <br/>

ResourceManager : permet de charger toutes des ressources d'un seul et même type. <br/>

Resource cache : permet de charger des ressources de type différent : <br/>

Essayons par exemple de charger un tileset contenant toute des textures d'herbe, pour cela, <br/> 
il faut d'abord créer un gestionnaire de textures comme ceci : <br/>

odfaeg::ResourceManager&lt;odfaeg::Texture&gt; tm; <br/>
</p>

<p>
Le 1er paramètre est le type des ressources externe et le second, le type de l'identifiant <br/> 
pour la ressource. (par défaut il vaut std::string) <br/>

odfaeg possède également quelques classes prédéfinie pour les classes de sfml chargeant des<br/> 
ressources : TextureManager, SoundManager, FontManager, ShaderManager.<br/>
Celle-ci ne prennent qu'un seul paramètre template qui vaut std::string par défault.<br/>
Voici comment instancier un gestionnaire de ressources de type odfaeg::Texture par exemple : <br/>
TextureManager&lt;&gt; tm; <br/>
</p>

<p>
L'identifiant est comme un alias qui pointe vers une ressource, ici par exemple je vais<br/> 
créer une énumération qui référencera les différentes ressources dans l'application  <br/>
Il faudra passer le type de l'enum en paramètre template au gestionnaire de ressources <br/>

<pre>
enum TEXTURES {
        GRASS
};
TextureManager&lt;TEXTURES&gt; tm;
</pre>
</p>

<p>
Pour charger la ressource il suffit d'appeler la fonction fromFile du gestionnaitre de <br/> 
ressources si on veut la charger à partir d'un fichier et fromFileWithAlias si on veut <br/>
qu'un alias référence la ressource. <br/>

tm->fromFile("tilesets/herbe.png", GRASS); <br/>

Le 1er paramètre est l'emplacement de la ressource par rapport à l'application, le second <br/> 
paramètre est l'alias qui pointe vers la ressource. (On n'est pas obligé de le <br/> 
précisé, dans ce cas la ressource ne sera accessible que par son 1er paramètre c'est à dire <br/> 
sont chemin, mais c'est déconseillé de procédé comme ça.) <br/>
</p>

<h2>Utiliser un cache.</h2>

<p>
On peut ajouter les gestionnaires de ressources dans un cache, ceci est pratique si vous <br/> 
devez charger des ressources externes de différent types dans un même contexte. <br/>
La classe resource cache prend un paramètre template : le type de l'identifiant qui <br/> 
référencera le gestionnaire de ressource. (Par défault le type est std::string) <br/>
ResourceCache&lt;&gt; cache; <br/>
cache.addResourceManager(tm, "TextureManager"); <br/>
Cette fonction prend en paramètre le gestionnaire de ressources à stocker dans le cache  <br/> 
ainsi que le nom du ressource manager. <br/>
</p>

<p>
Ensuite vous pouvez récupérer le gestionnaire de ressource comme suit : <br/>

TextureManager&lt;TEXTURES&gt;&amp; tm = cache.resourceManager&lt;odfaeg::Texture, TEXTURES&gt;("TextureManager"); <br/>

En précisant le type de gestionnaire de ressources à récupérer dans le cache et le type de <br/>
l'identifiant utilisé dans le gestionnaire de ressources. <br/>

Pour récupérer la ressource il suffit ensuite d'écrire ceci : <br/>

tm.getResourceByAlias(GRASS); <br/>

On peut récupérer la ressource de deux façons : soit par son alias ou bien par son chemin. <br/>
</p>


<h2> Charger des ressources avec son propre chargeur de ressource. </h2>

<p>
Supposons maintenant que nous voulons charger des ressources externes mais que le <br/> 
gestionnaire d'odfaeg ne possède pas de fonction pour charger ce type de ressource, pour <br/> 
cela il faut d'abord créer un chargeur personnalisé (par exemple un chargeur de <br/> 
fichier .3ds) et ensuite il faut passer la fonction qui charge la ressource au gestionnaire <br/> 
de ressources en créant un foncteur comme ceci : <br/>

std::function&lt;bool(Object3DS,std::string&gt; loadFunc(&amp;MyLoader::fromFile); <br/>

Ensuite nous devons passez ce foncteur à la fonction load du resource manager : <br/>

<pre>
ResourceManager&lt;Object3DS, OBJECTS3DS&gt; om;
om.load(loadFunc, «resource location»);
</pre>
</p>

<p>
Voila, le chargeur de ressource externe de odfaeg n'est pas compliqué et possède pas mal de <br/> 
fonction utilitaire comme par exemple récupérer tout les chemins vers les ressources <br/> 
d'un même type qui ont été chargée. <br/>
</p>

<h2>La destruction des ressources : </h2>

<p>
La destruction des ressources ce fait automatiquement à la destruction du cache ou bien du gestionnaire de ressources<br/>
, lors de l'arrêt du programme, cependant, on peut le faire explicitement en appelant les <br/> 
fonctions deleteResouceByAlias ou bien deleteResourceByPath si on en a plus besoin.<br/>
faîtes attention qu'un autre thread n'utilise pas la ressource dans ce cas.<br/>
</p>
                </html>
        </fr>
        <en>
             <html>
                <h1>Management of eternal resources.</h1>
                    To manage external resource, odfaeg use two classes : <br/>
                    ResourceManager : it allows you to manage resources of one type. <br/>
                    ResourceCache : it allows you to manage resource of multiple type. <br/>
                    <h2>How to load and access to external resources.</h2>
                        <p>
                            For example, try to load a tileset containing grass textures, for that, <br/>
                            we need first to create a resource manager for textures, like this :
                            <pre>
                                odfaeg::ResourceManager&lt;odfaeg::Texture&gt; tm; 
                            </pre>
                            The first template parameter is the resource type and the second is the type of the identifiant<br/>
                            which'll be used to get the pointer to the holded resource. (std::string by default)<br/>
                            The pointer to the resource is unique and is destroyed when the resource manager is destroyed.<br/>
                            So, this is the resource manager which serve as a context for the holded resources.<br/>
                            odfaeg have also some predefined classes to load odfaeg's external's resource's types : <br/>
                            TextureManager, SoundManager, FontManager and ShaderManager.<br/>
                            So you don't need to pass the resource type as first template parameter for those classes.<br/>
                            To load a resource, just call the loadFromFile method like this (or the loadFormFilewithAlias method<br/>
                            if you want to use an alias to get resource's pointer.)<br/>
                            Here is an example which show how to associate enums values to resouces :
                            <pre>
                                enum TEXTURES {
                                    GRASS
                                };
                                TextureManager&lt;TEXTURES&gt; tm;
                                tm->fromFileWithAlias("tilesets/herbe.png", GRASS); 
                            </pre>
                            So, the alias GRASS is associated to this texture's location : "tilesets/herbe.png".<br/>
                            Alias are usefull if you don't want to have to remember about the exact std::string value<br/>
                            each time you want to get the resource.<br/>
                            You can access to the resource's pointer by calling this two methods : <br/>
                            <pre>
                                Texture* text = tm.getResourceByAlias(GRASS);
                                text = tm.getResourceByPath("tilesets/herbe.png");
                            </pre>
                            If you use the fromFile method, the resource is only accessible with his location<br/>
                            </p>
                            <h2>Loading resources of different types into a single context.</h2>
                            <p>
                            Sometimes you'll need to load resources of several type in a single context.<br/>
                            This is the purpose of the class ResourceCache.<br/>
                            The cache can hold resource manager's of different types, and also use an unique identifiant for each <br/>
                            resource's managers, the default identifiant's type is std::string but it can be another type.<br/>
                            To add a resource manager into the cache, you just need to call the addResourceManager method.<br/>
                            This method takes the resource manager to store as parameter, and the identifiant : <br/>
                            <pre>
                                cache.addResourceManager(tm, "TextureManager"); 
                            </pre>
                            Then, you can get the resource manager like this :
                            <pre>
                                TextureManager&lt;TEXTURES&gt;&amp; tm = cache.resourceManager&lt;odfaeg::Texture, TEXTURES&gt;("TextureManager"); 
                            </pre>
                            you need to pass the type of the resource manager to get and the type of the identifiant pointing to the resources.<br/>
                            as template parameters.<br/>
                            </p>
                </html>
        </en>
    </content>
</page>
