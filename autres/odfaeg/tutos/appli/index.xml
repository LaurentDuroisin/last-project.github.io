<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/xsl/structure.xsl"?>
<page>
    <menu>/autres/odfaeg/xml/menu.xml</menu>
    <footer>/autres/odfaeg/xml/footer.xml</footer>
    <title>ODFAEG</title>
    <content>
        <fr>
                <html>
                      <h1>Chapitre II : Création d'une application ODFAEG-LIKE.</h1>

<h2>Définition de l'application : </h2>

<p>Pour créer une application « odfaeg-like » il faut hériter de la classe odfaeg::application.<br/>
(Créer donc une nouvelle classe et faîtes la hériter de odfaeg::application.)<br/>

Si votre application est une application graphique, vous devez appeler le constructeur de la classe parent<br/>
(celui de la classe odfaeg::Application) en lui passant les paramètres suivants :
sf::VideoMode, std::string (titre de la fenêtre) <br/>
MyAppli(sf::VideoMode wm, std::string title) : Application (wm, title)<br/></p>

<p>Ensuite vous pouvez redéfinir les méthodes suivantes : <br/>

onLoad() <br/>
<br/>
Méthode à redéfinir si vous avez des ressources externes à charger. <br/>
<br/>
onInit()<br/>
<br/>
C'est dans cette méthode que vous créerez et initialiserez tout ce qui doit être initialisé.<br/>
(Les commandes, les entités graphiques, les composants graphiques, la définition des collisions, etc...)<br/>
<br/>
onRender(odfaeg::FastRenderComponentManager *frcm) <br/>
<br/>
Dans cette méthode vous pouvez définir ce qui devra être dessiné sur les composants de rendu de ODFAEG à la frame suivante.<br/>
<br/>(Le composant de rendu se chargera de rendre vos dessins de la manière la plus optimale suivant les fonctionnalités supportées par votre carte graphique)<br/>
<br/>
Si cette méthode n'est pas redéfinie, ou bien que l'application n'est pas une application graphique, rien n'est dessiné.<br/>
<br/>
onDisplay(odfaeg::RenderWindow *window)<br/>
<br/>
Cette méthode est à redéfinir si vous devez dessiner des choses directement sur la fenêtre de rendu.<br/>
En général ça se limite à pas grand chose. (une texture de lumière, des menus, des overlay, etc...)<br/>
Vous pouvez également choisir de dessiner les entités directement sur la fenêtre plutôt que sur un <br/>
Composant de rendu si vous ne voulez pas utilisez de shaders, ou bien si votre PC ne les supporte pas. <br/>
Mais ceci est bien sûr déconseillé à cause de tout les problèmes que ça peut engendré.<br/>
Dans ce cas je vous conseillerai donc d'acheter un PC plus récent.<br/>
onUpdate(sf::Event&amp; event)<br/>
<br/>
Dans cette méthode vous pouvez mettre à jour la frame suivante. (Déplacer des entités au clavier ou à la souris par exemple)<br/>
<br/>
<br/>
(Si l'application n'est pas une application graphique ou si cette méthode n'est pas redéfinie, rien n'est remis à jour) <br/>
Cette méthode prend un paramètre : le dernière événement SFML généré par l'application.<br/>
Cette méthode renvoie tout les événements SFML 1 à 1 à chaque tour de boucle.<br/>
<br/>
OnExec()<br/>
<br/>
Cette méthode est à redéfinir si votre application ne possède pas de fenêtre, c'est le cas par exemple des applications <br/>
serveur, mais elle peut aussi être redéfinie si votre application doit effectuer des traitement en fin de boucle.<br/></p>

<h2>Création de l'application : </h2>
<p>
<br/>
Pour créer une application il suffit d'appeler le constructeur en lui passant les bons paramètres suivant le type d'application  dans la fonction main : <br/>
<br/>
MyAppli app(sf::VideoMode(800, 600), "Test odfaeg");<br/>
<br/>
Le constructeur de la classe odfaeg::application peut prendre des paramètres supplémentaires comme par exemple : <br/>
<br/>
un booléen qui indique si l'on veut utiliser un thread pour la gestion d'événement. (false par défaut.)
un booléen qui indique si l'on veut activer le depthtest d'opengl ou non. (par défaut ce booléen vaut true.) <br/>
<br/>
sf::Style : le style de la fenêtre, par défaut c'est le style par défaut qui est utilisé. <br/>
<br/>
sf::ContextSettings : permet de spécifier des options de rendu opengl plus détaillées.<br/>
<br/>
Enfin, pour lancer l'application il suffit d'appeler la méthode exec() de la classe application, <br/>
celle-ci renvoie un booléen qui indique si l'application a réussi à s'exécuté correctement ou si une erreur s'est produite : <br/>
<br/>
return app.exec() ;
<br/>
</p>
<h2>Arrêt de l'application : </h2>

<p>Pour arrêter l'application, il suffit d'appelé la méthode stop dans votre classe qui hérite de application<br/>
, par exemple, ici, nous voulons arrêter l'application lorsque l'utilisateur ferme la fenêtre : <br/>
<br/>
Nous devons donc rajouter ce code-ci dans la méthode onUpdate : <br/>
<br/>
if (event.type == sf::Event::Closed) { <br/>
<br/>
            stop(); <br/>
} <br/>
<br/>
Les classes de rendu graphique 2D d'odfaeg sont les même que celle de sfml à l'exception prêt <br/>
qu'elles se trouvent dans le namepsace odfaeg::gaphic et non dans le namespace sf. <br/>
odfaeg possède un sous namespace par module, ses sous namespace sont : <br/>
core (le module core), physic (le module physique), network (le module réseau), sound (le module son)<br/>
, graphic (le module graphique), graphic::g2d (le module 2D), graphic::g3d (le module 3D)<br/>
(Par exemple odfaeg::graphic::ConvexShape pour les formes convexe)<br/></p>
<br/>
A la différence de SFML, les objets SFML-LIKE de odfaeg peuvent posséder des points en 3D<br/>
pour rendre des entité en 2.5D. (C'est à dire des plans par exemple.) <br/>

Voilà maintenant vous savez comment créer des applications odfaeg toute simple! <br/>
                </html>
        </fr>
        <html>
        <en>
            <h2>Chapter II : How to create an ODFAEG application.</h2>
            <p>
            To create an "odfaeg-like" application, you just have to inherit from the odfaeg::core::Application <br/>
            class.
            If your application is not a gui application, call the default constructor of the class, otherwise,<br/>
            call the constructor with this parameters : the video mode and window's the title.<br/>
            Some additionnal parameters can be passed : <br/>
            Then you can redefine the followings methods : <br/>
            onLoad() : method to redefine if you have to loard external resources used by the application.<br/>
            onInit() : method to redefine to initialise everything which should be initialised before the game start.<br/>
            onRender(odfaeg::graphic::FastRenderComponentManger* frcm) : method to redefine to draw everything on components initialized before.<br/>
            onDisplay(odfaeg::RenderWindow *window) : This method is to redefine to draw everything on the window.<br/>
            onUpdate(sf::Event event) : Method to redefine if you have to update things.<br/>
            onExec() : method to redefine for all toher treatment. (Getting informations from the network, update the game logic, etc...)
            </p>
            <h2>Create the application.</h2>
            <p>
            Now that we now how to define the application, we need to create it, for that, the application<br/>
            have to be create into the main function, which is the start point of every c++ program.<br/>
            There are just to line of code to create an application :
            <pre>
            MyAppli app(sf::VideoMode(800, 600), "Test odfaeg");
            return app.exec();
            </pre>
            </p>
            <p>
                The constructor of the odfaeg::core::application class can take some additional parameters :<br/>
                A booléan which indicate if we want to use a thread to manage events. (false by default) <br/>
                Another boolean if we want to activate the depthtest. (true by default) <br/>
                The style of the window. (the default style is used by default) <br/>
                sf::ContextSettings. (Some advanced options for opengl <br/>
                (the opengl version we want to use, the anti aliasing level, etc...))<br/>
                Finally the method exec'll launch the application, this method return an error code : <br/>
                0 if everything is fine, -1 if an error has occured. <br/>
                <h2>How to stop the application.</h2>
                    To stop the application you just need to call the stop() method, by example<br/>
                    if you want to stop the application when the window is closed, wirte this code : <br/>
                    <pre>
                        if (event.type == sf::Event::Closed) {
                            stop();
                        }
                    </pre>
                    Each classes of odfaeg are in the namespace odfaeg and there is a sub namespace per module : <br/>
                    core : the main module.  <br/>
                    physic : the physic module.  <br/>
                    network : the networking module.  <br/>
                    sound : the audio module.  <br/>
                    graphic : the graphic module.  <br/>
                    graphic::g2d : the 2d module.  <br/>
                    graphic::g3d : the 3d module.  <br/>
                    The odfaeg and the sfml classes are very similar, the only difference is that odfaeg entities <br/>
                    have a z coordinate for the 3D and implements some advanced features like VBO, vertex indexes, etc...<br/>
            </p>
        </en>
        </html>
    </content>
</page>
