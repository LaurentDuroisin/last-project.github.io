<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/xsl/structure.xsl"?>
<page>
    <menu>/autres/odfaeg/xml/menu.xml</menu>
    <footer>/autres/odfaeg/xml/footer.xml</footer>
    <title>ODFAEG</title>
    <content>
        <fr>
                <html>
                        <h1>Chapitre VI : les entités 2.5D de odfaeg.</h1>

               		<h2>Les entités de haut niveau de ODFAEG : </h2>

<p>
Les entités SFML-LIKE sont utile dans les petits jeux, mais restent fort limitées dans<br/> 
les gros jeux ou il y a beaucoup d'entités graphiques de type différent.<br/>

ODFAEG permet donc de créer ses propres entités qui sont des entités plus évoluée que les<br/> 
entités SFML-LIKE qui permettent juste de tracer des formes, les entités ODFAEG se <br/> 
servent aussi des tableaux de sommets de SFML mais possèdent des attributs <br/> 
supplémentaires : des états, des volumes de collision, des faces, des matériaux, des <br/> 
sommets pré-transformé et des VBOs, des entités enfants et une entités parent, et quelques fonction que  <br/> 
l'on peut redéfinir si nos entités doivent interagir avec d'autres entités afin <br/> 
d'éviter de devoir faire trop d'héritage) <br/>
</p>

<p>
Les faces peuvent contenir un ou plusieurs tableau de sommets utilisant le même matériel et <br/> 
le même type de primitive.<br/>
Les matériaux peuvent avoir une ou plusieurs textures (multi-texturing), ainsi qu'une <br/> 
couleur. <br/>
</p>

<p>
Les entités ODFAEG-LIKE permettent donc de faire des rendus de manière plus avancée. (tout<br/> 
Exactement comme les commandes qui permettent de gérer des événements SFML de façon plus <br/> 
avancée.) <br/>

ODFAEG possède déjà des entités 2D et 2.5D que j'utilise uniquement dans le but de faire <br/> des tests : <br/>
Ces entités se situent dans le module graphique de ODFAEG. <br/>

Chaque entité possède un type qui est en fait un groupe, qui regroupe un ensemble <br/> 
d'entité de même type, voici les différents groupe d'entité 2D et 2.5D de ODFAEG : <br/>
</p>

<p>
odfaeg::Tile : similaire à un sprite à la SFML-Like mais hérite de la classe Entity du <br/> 
framework. <br/>

odfaeg::graphic::BigTile : un ensemble de tiles qui forment une grande tile. <br/>

odfaeg::graphic::g2d::Wall : un mur. (Contient une tile et quelques informations supplémentaires pour la <br/> 
projection des ombres et les collisions avec la lumière, et un type (un int) qui sert <br/> 
à générer des cartes de façon aléatoire.) <br/>
</p>

<p>
odfaeg::graphic::Decor : tout modèle statique. (même chose que ci-dessus excepté le type) <br/>

odfaeg ::graphic::Animation : toute entité qui évolue en fonction du temps, cette classe peut <br/> 
contenir plusieurs entités mais une seule ne peut être affichée en même temps. <br/>
Une animation peut contenir d'autres animations et ainsi interagir avec des animations <br/> 
enfants afin de créer des animations squelettique <br/>
</p>

<p>
Et chaque entité de l'animation correspond à une frame de l'animation. <br/>

odfaeg::graphic::Shadow, elles sont générées automatiquement par le framework donc pas besoin de <br/> 
s'en soucier. <br/>

odfaeg::graphic::PonctualLight : une lumière poncutelle. <br/>
</p>

<h2>Créer des entités.</h2>

<p>
Pour créer des entités, rien de bien compliqué, il suffit d'appeler les constructeurs <br/> 
suivants : <br/>
</p>

<p>
Pour les tiles : <br/>

Tile(tm.getResourceByAlias(GRASS), Vec3f(0, 0, 0), Vec3f(120, 60, 0),IntRect(0, 0, 100, 50))<br/>

On lui passe un pointeur vers une texture, une position, une taille et les coordonnées de<br/> 
textures. <br/>
</p>

<p>Pour les mur : <br/>

<pre>
Tile *t = new Tile(walls[3]->getFaces()[0]->getMaterial().getTexture(), Vec2f(0, 130),<br/>
Vec2f(walls[3]->getSize().x, walls[3]->getSize().y), walls[3]->getFaces()[0]->getMaterial().getTexRect());
        w = new Wall(3, t,AmbientLight::getAmbientLight());
</pre>
On lui passe un type  qui correspond à ceci : <br/>
0 = mur de gauche. <br/>
1 = mur de droite. <br/>
2 = mur du coin en bas à droite. <br/>
3 = mur du coin en haut à gauche. <br/>
4 = mur du coin en haut à droite. <br/>
5 = mur du bas en bas à gauche. <br/>
</p>

<p>
Plus tard je ferai une enum plutôt que un int. (Ca sera plus facile.:P) <br/>

le deuxième paramètre est la tile du mur et le dernier, la lumière utilisée pour généré <br/> 
l'ombre du mur. <br/>
</p>

<p>Pour les décors : <br/>

<pre>
 Decor* decor = new Decor(new Tile(tm.getResourceByAlias(HOUSE), Vec3f(0, 200, 350), Vec2f(250, 300, 0),<br/>
 IntRect(0, 0, 250, 300)), AmbientLight::getAmbientLight());  
</pre>     
   
On lui passe une tile, et la lumière pour générer l'ombre.<br/>
</p>

<p>
Les animations : <br/>

Il suffit de créer plusieurs entités (de n'importe quel type) qui servirons alors de frames <br/> 
pour l'animation et de les ajouter à l'animation avec la méthode addEntity, une <br/> 
animation prend en paramètre le framerate de l'animation. <br/>
Anim* fire = new Anim(0.1f); <br/>
</p>
                </html>
        </fr>
    </content>
</page>
