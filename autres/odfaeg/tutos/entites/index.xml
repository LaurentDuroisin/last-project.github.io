<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/xsl/structure.xsl"?>
<page>
    <menu>/autres/odfaeg/xml/menu.xml</menu>
    <footer>/autres/odfaeg/xml/footer.xml</footer>
    <title>ODFAEG</title>
    <content>
        <fr>
                <html>
                        <h1>Chapitre VI : les entités 2.5D de odfaeg.</h1>

               		Les entités de haut niveau de ODFAEG : 

Les entités SFML-LIKE sont utile dans les petites jeux, mais restent fort limitées dans les gros jeux ou il y a beaucoup d'entités graphique de type différent.

ODFAEG permet donc de créer ses propres entités qui sont des entités plus évoluée que les entités SFML-LIKE qui permettent juste de tracer des formes, les entités ODFAEG se servent aussi des tableaux de sommets de SFML mais possèdent des attributs supplémentaires : des états, des volumes de collision, des faces, des matériaux, des sommets pré-transformé, des entités enfants et une entités parent, et quelque fonction que l'on peut redéfinir si nos entités doivent interagir avec d'autres entités afin d'éviter de devoir faire trop d'héritage)

Les faces peuvent contenir un ou plusieurs tableau de sommets utilisant le même matériel et le même type de primitive.
Les matériaux peuvent avoir une ou plusieurs textures (multi-texturing), ainsi qu'une couleur.

Les entités ODFAEG-LIKE permettent donc de faire des rendus de manière plus optimisé. (tout comme les commandes qui permettent de gérer des événements SFML de façon plus optimisée.)

ODFAEG possède déjà des entités 2D et 2.5D que j'utilise uniquement dans le but de faire des tests :
Ces entités se situent dans le module g2d du module graphique de ODFAEG.

Chaque entité possède un type qui est en fait une sorte de groupe, qui regroupe un ensemble d'entité de même type, voici les différents groupe d'entité 2D et 2.5D de ODFAEG :

odfaeg::Tile : similaire à un sprite à la SFML-Like mais hérite de la classe Entity du framework.

Odfaeg::BigTile : un ensemble de tiles qui forment une grand tile.

odfaeg::Wall : un mur. (Contient une tile et quelques informations supplémentaires pour la projection des ombres et les collisions avec la lumière, et un type (un int) qui sert à générer des cartes de façon aléatoire.)

odfaeg::Decor : tout modèle statique. (même chose que ci-dessus excepté le type)

odfaeg ::Animation : toutes entité qui évolue en fonction du temps, cette classe peut contenir plusieurs entités mais une seule ne peut être affichée en même temps.
Une animation peut contenir d'autres animations et ainsi interagir avec des animations enfants afin de créer des animations squelettique

Et chaque entité de l'animation correspond à une frame de l'animation.

odfaeg::Shadow, elles sont générées automatiquement par le framework donc pas besoin de s'en soucier.;)

odfaeg::PonctualLight : une lumière poncutelle.

Créer des entités.

Pour créer des entités, rien de bien compliqué, il suffit d'appeler les constructeurs suivants :

Pour les tiles :

Tile(tm.getResourceByAlias(GRASS), Vec2f(0, 0), Vec2f(120, 60),IntRect(0, 0, 100, 50))

On lui passe un pointeur vers une texture, une position, une taille et les coordonnées de textures.

Pour les mur  : 

Tile *t = new Tile(walls[3]->getFaces()[0]->getMaterial().getTexture(), Vec2f(0, 130), Vec2f(walls[3]->getSize().x, walls[3]->getSize().y), walls[3]->getFaces()[0]->getMaterial().getTexRect());
        w = new Wall(3, t,AmbientLight::getAmbientLight());
On lui passe un type  qui correspond à ceci :
0 = mur de gauche.
1 = mur de droite.
2 = mur du coin en bas à droite.
3 = mur du coin en haut à gauche.
4 = mur du coin en haut à droite.
5 = mur du bas en bas à gauche.

Plus tard je ferai une enum plutôt que un int. (Ca sera plus facile.:P)

le deuxième paramètre est la tile du mur et le dernier, la lumière utilisée pour généré l'ombre du mur.

Pour les décors : 

 Decor* decor = new Decor(new Tile(tm.getResourceByAlias(HOUSE), Vec2f(0, 200), Vec2f(250, 300), IntRect(0, 0, 250, 300)), AmbientLight::getAmbientLight());       
   
On lui passe une tile, et la lumière pour générer l'ombre.

Les animations :

Il suffit de créer plusieurs entités (de n'importe quel type) quis ervirons alors de frames pour l'animation et de les ajouter à l'animation avec la méthode addEntity, une animation prend en paramètre le framerate de l'animation. 
Anim* fire = new Anim(0.1f);

                </html>
        </fr>
    </content>
</page>
